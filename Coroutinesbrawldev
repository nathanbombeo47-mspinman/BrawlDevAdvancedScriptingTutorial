create means to make the script how it function, 
YIELD means to stop the function, 
RESUME means to continue when the YIELD was abled, IT REMOVES THE YIELD then it RESUMES,             YIELD IS THE MOST IMPORTANT AND GAME CHANGER THAN ALL OF THESE
and CLOSE means to get RID of all functions.

ALL FUNCTIONS
CREATE coroutine.create()
YIELD 
RESUME coroutine.resume()
CLOSE 
                   local task2 = coroutine.wrap(function()      coroutine.wrap(function()         local function myfunction()
                       print("Coroutine Task")                      print("Coroutine Task")          print("function")
WRAP               end)                                         end)()                            end

                   task2()                                                                        coroutine.wrap(myfunction)()

FOR ARGUMENTS
--Task2
local task2 = coroutine.create(function(nu, nu)
    print(nu + nu )
    print("coroutine task")
end)

coroutine.resume(task2, 2, 2)

--[[coroutine.wrap(function()
    print("Coroutine Task")
end)()]]

--[[
while true do

end

while true do

end
]]

FOR MULTI TASKING
local loopOne = coroutine.create(function()
    while true do
      print("Nathan Will Be Successful")
      task.wait(.01)
    end
end)

coroutine.resume(loopOne)

while true do  
   print("Nathan Will Breakthrough")
   task.wait(.01)
end

FOR STATUS                                          │   local loopOne = coroutine.create(function()  
THREE STAGES OF A COROUTINE                         │      --[[while true do
1. SUSPENDED                                        │        print("Nathan Will Be Successful")
2. RUNNING                                          │        task.wait(.01)
3. DEAD                                             │      end]]
AND WE CAN CHECK THESE STATUS BY USING A FUNCTION   │  end)
                                                    │ 
                                                    │ 8: print(coroutine.status(loopOne))
                                                    │  coroutine.resume(loopOne)
                                                    │ 10: print(coroutine.status(loopOne))
                                                    │
                      OUTPUT                        │  --[[while true do  
         suspended  -  Server - Coroutines:8        │      print("Nathan Will Breakthrough")
         dead  -  Server - Coroutines:10            │     task.wait(.01)
                                                    │  end]]

FOR YIELD (VERY USEFUL)
coroutine.yield()

local loopthread = coroutine.create(function()
    for i = 1, 10 do
    print(i)
    coroutine.yield()
    end
end)

coroutine.resume(loopthread)

local loopthread = coroutine.create(function()
    for i = 1, 10 do
    print(i)
    coroutine.yield()
    end
end)


coroutine.resume(loopthread)                                                       OUTPUT:

print("Execution has stopped")                                   1  -  Server - Coroutines:3
                                                                 Execution has stopped  -  Server - Coroutines:11
coroutine.resume(loopthread)                                     2  -  Server - Coroutines:3
                                                                 Execution has stopped  -  Server - Coroutines:15
print("Execution has stopped")                                   3  -  Server - Coroutines:3
                                                                 suspended  -  Server - Coroutines:19
coroutine.resume(loopthread)

print(coroutine.status(loopthread))

FOR CLOSE
coroutine.close() simply ends the coroutine and we just won't be able to use it, unless we create another coroutine.

local loopthread = coroutine.create(function()
    for i = 1, 10 do
        print(i)
        coroutine.yield()                                                OUTPUT:
    end                                                   1  -  Server - Coroutines:3
end)                                                      Execution has stopped  -  Server - Coroutines:11
                                                          2  -  Server - Coroutines:3
                                                          Execution has stopped  -  Server - Coroutines:15
coroutine.resume(loopthread)                              Execution has stopped  -  Server - Coroutines:20
                                                          dead  -  Server - Coroutines:22
print("Execution has stopped")

coroutine.resume(loopthread)

print("Execution has stopped")
coroutine.close(loopthread)

coroutine.resume(loopthread)

print("Execution has stopped")

print(coroutine.status(loopthread))

For Yield Return
local loopthread = coroutine.create(function()
    for i = 1, 10 do
        print(i)
        coroutine.yield(true, 5, "Nathan will be successful")
    end
end)


local successful, numbera1, resulta, resultaa = coroutine.resume(loopthread)
print(numbera1, resulta, resultaa)

print("Execution has stopped")  

coroutine.resume(loopthread)

print(coroutine.status(loopthread))
